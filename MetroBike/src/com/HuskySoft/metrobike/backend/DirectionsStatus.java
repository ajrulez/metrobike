package com.HuskySoft.metrobike.backend;

/**
 * Holds various standard error messages that may be generated by Algorithms.
 * These messages are designed to be passed back to the user.
 * 
 * @author dutchscout
 * 
 */
public enum DirectionsStatus {

    /**
     * When the request is still in-process.
     */
    NOT_YET_COMPLETE("Request is not yet complete.", false),

    /**
     * Nothing went wrong; directions successfully processed.
     */
    REQUEST_SUCCESSFUL("Request successfully processed.", false),

    /**
     * During a processing step, no error was found.
     */
    NO_ERROR_FOUND("No error found.", false),

    /**
     * Invalid request parameters.
     */
    INVALID_REQUEST_PARAMS("Invalid request parameters.", true),

    /**
     * Attempted to ask an algorithm for a travel mode that isn't supported (ex:
     * walking).
     */
    UNSUPPORTED_TRAVEL_MODE_ERROR("Requested travel mode not supported.", true),

    /**
     * The default charset is not supported.
     */
    UNSUPPORTED_CHARSET("Internal error: default charset not supported.", true),

    /**
     * Couldn't parse the server's response.
     */
    PARSING_ERROR("Got a bad response from the server.", true),

    /**
     * Any kind of connection error.
     */
    CONNECTION_ERROR("Having trouble connecting to the server.  Please try again later", true),

    /**
     * No results found. Probably a problem with location or travel time.
     */
    NO_RESULTS_FOUND("Found no results.  Please check to be sure your addresses"
            + " and travel options are correct!", true),

    /**
     * Over query limit. Google Directions says we have exceeded the query limit
     * (for the day)
     */
    OVER_QUERY_LIMIT("Over query limit. App has exceeded maximum number of daily"
            + " directions request queries from Google.", true),
    
    /**
     * User cancelled the request while it was in-progress.
     */
    USER_CANCELLED_REQUEST("User cancelled the request while it was in-progress.", true);

    /**
     * The human-readable message to store.
     */
    private String message;

    /**
     * Whether this status indicates an error condition.
     */
    private boolean isError;

    /**
     * Private constructor (to prevent re-construction).
     * 
     * @param enumMessage
     *            the message associated with this enum value
     * @param enumIsError
     *            whether this enum represents an error condition
     */
    private DirectionsStatus(final String enumMessage, final boolean enumIsError) {
        message = enumMessage;
        isError = enumIsError;
    }

    /**
     * Returns a human-readable message for this enum value.
     * 
     * @return a human-readable message for this enum value
     */
    public String getMessage() {
        return message;
    }

    /**
     * Returns true if the enum represents an error condition, false otherwise.
     * 
     * @return true if the enum represents an error condition, false otherwise
     */
    public boolean isError() {
        return isError;
    }
}